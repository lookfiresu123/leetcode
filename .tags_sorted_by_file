!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
compareVersion	compare_version_numbers.c	/^int compareVersion(char* version1, char* version2) {$/;"	f
length_after	compare_version_numbers.c	6;"	d	file:
length_before	compare_version_numbers.c	5;"	d	file:
main	compare_version_numbers.c	/^int main(void){$/;"	f
containsDuplicate	contains_duplicate.c	/^bool containsDuplicate(int* nums, int numsSize) {$/;"	f
main	contains_duplicate.c	/^int main(void){$/;"	f
containsNearbyDuplicate	contains_duplicate_II.c	/^bool containsNearbyDuplicate(int* nums, int numsSize, int k) {$/;"	f
main	contains_duplicate_II.c	/^int main(void){$/;"	f
countPrimes	count_primes.c	/^int countPrimes(int n) {$/;"	f
main	count_primes.c	/^int main(void){$/;"	f
max	count_primes.c	6;"	d	file:
main	excel_sheet_column_number.c	/^int main(void){$/;"	f
scale	excel_sheet_column_number.c	4;"	d	file:
titleToNumber	excel_sheet_column_number.c	/^int titleToNumber(char* s) {$/;"	f
convertToTitle	excel_sheet_column_title.c	/^char *convertToTitle(int n){$/;"	f
length	excel_sheet_column_title.c	4;"	d	file:
main	excel_sheet_column_title.c	/^int main(void){$/;"	f
scale	excel_sheet_column_title.c	5;"	d	file:
main	factorial_trailing_zeroes.c	/^int main(void){$/;"	f
trailingZeroes	factorial_trailing_zeroes.c	/^int trailingZeroes(int n) {$/;"	f
delete_zero	happy_number.c	/^int delete_zero(int x){$/;"	f
isHappy	happy_number.c	/^bool isHappy(int n) {$/;"	f
main	happy_number.c	/^int main(void){$/;"	f
make_happy	happy_number.c	/^int make_happy(int y){$/;"	f
max	happy_number.c	5;"	d	file:
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
ListNode	intersection_of_two_links.c	/^struct ListNode {$/;"	s	file:
getIntersectionNode	intersection_of_two_links.c	/^struct ListNode *getIntersectionNode(struct ListNode *headA,struct ListNode *headB) {$/;"	f
next	intersection_of_two_links.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
val	intersection_of_two_links.c	/^    int val;$/;"	m	struct:ListNode	file:
TreeNode	invert_binary_tree.c	/^struct TreeNode {$/;"	s	file:
invertTree	invert_binary_tree.c	/^struct TreeNode* invertTree(struct TreeNode* root) {$/;"	f
left	invert_binary_tree.c	/^     struct TreeNode *left;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
right	invert_binary_tree.c	/^     struct TreeNode *right;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
val	invert_binary_tree.c	/^     int val;$/;"	m	struct:TreeNode	file:
isIsomorphic	isomorphic_strings.c	/^bool isIsomorphic(char* s, char* t) {$/;"	f
length_ascii	isomorphic_strings.c	6;"	d	file:
main	isomorphic_strings.c	/^int main(void){$/;"	f
TreeNode	lowest_common_ancestor.c	/^struct TreeNode {$/;"	s	file:
find_p_or_q	lowest_common_ancestor.c	/^int find_p_or_q = 0;$/;"	v
left	lowest_common_ancestor.c	/^    struct TreeNode *left;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
lowestCommonAncestor	lowest_common_ancestor.c	/^struct TreeNode* lowestCommonAncestor(struct TreeNode* root, struct TreeNode* p, struct TreeNode* q) {$/;"	f
main	lowest_common_ancestor.c	/^int main(){$/;"	f
right	lowest_common_ancestor.c	/^    struct TreeNode *right;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
val	lowest_common_ancestor.c	/^    int val;$/;"	m	struct:TreeNode	file:
main	majority_element.c	/^int main(void){$/;"	f
majorityElement	majority_element.c	/^int majorityElement(int* nums, int numsSize) {$/;"	f
TreeNode	minimum_depth_of_binary_tree.c	/^struct TreeNode {$/;"	s	file:
left	minimum_depth_of_binary_tree.c	/^    struct TreeNode *left;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
minDepth	minimum_depth_of_binary_tree.c	/^int minDepth(struct TreeNode* root){$/;"	f
right	minimum_depth_of_binary_tree.c	/^    struct TreeNode *right;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
val	minimum_depth_of_binary_tree.c	/^    int val;$/;"	m	struct:TreeNode	file:
hammingWeight	numbers_of_1_bits.c	/^int hammingWeight(uint32_t n) {$/;"	f
main	numbers_of_1_bits.c	/^int main(void){$/;"	f
ListNode	palindrome_linked_list.c	/^struct ListNode {$/;"	s	file:
determine	palindrome_linked_list.c	/^bool determine(struct ListNode** head) {$/;"	f
isPalindrome	palindrome_linked_list.c	/^bool isPalindrome(struct ListNode *head) {$/;"	f
main	palindrome_linked_list.c	/^int main(){$/;"	f
next	palindrome_linked_list.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
val	palindrome_linked_list.c	/^    int val;$/;"	m	struct:ListNode	file:
isPalindrome	palindrome_number.c	/^bool isPalindrome(int x) {$/;"	f
main	palindrome_number.c	/^int main(){$/;"	f
size_int	palindrome_number.c	5;"	d	file:
TreeNode	path_sum.c	/^struct TreeNode {$/;"	s	file:
hasPathSum	path_sum.c	/^bool hasPathSum(struct TreeNode* root, int sum) {$/;"	f
left	path_sum.c	/^    struct TreeNode *left;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
right	path_sum.c	/^    struct TreeNode *right;$/;"	m	struct:TreeNode	typeref:struct:TreeNode::TreeNode	file:
val	path_sum.c	/^    int val;$/;"	m	struct:TreeNode	file:
isPowerOfTwo	power_of_two.c	/^bool isPowerOfTwo(int n) {$/;"	f
main	power_of_two.c	/^int main(void){$/;"	f
computeArea	rectangle_area.c	/^int computeArea(int A, int B, int C, int D, int E, int F, int G, int H) {$/;"	f
compute_coverd_rectangle	rectangle_area.c	/^int compute_coverd_rectangle(int first_x_min,int first_y_min,int first_x_max,int first_y_max,$/;"	f
compute_first_rectangle	rectangle_area.c	/^int compute_first_rectangle(int first_x_min,int first_y_min,int first_x_max,int first_y_max){$/;"	f
compute_second_rectangle	rectangle_area.c	/^int compute_second_rectangle(int second_x_min,int second_y_min,int second_x_max,int second_y_max){$/;"	f
main	rectangle_area.c	/^int main(){$/;"	f
ListNode	remove_linked_list_elements.c	/^struct ListNode{$/;"	s	file:
main	remove_linked_list_elements.c	/^int main(void){$/;"	f
next	remove_linked_list_elements.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
removeElements	remove_linked_list_elements.c	/^struct ListNode* removeElements(struct ListNode* head, int val) {$/;"	f
val	remove_linked_list_elements.c	/^    int val;$/;"	m	struct:ListNode	file:
main	reverse_bits.c	/^int main(void){$/;"	f
reverseBits	reverse_bits.c	/^uint32_t reverseBits(uint32_t n) {$/;"	f
size_byte	reverse_bits.c	5;"	d	file:
LIMIT	reverse_integer.c	5;"	d	file:
LIMIT_min	reverse_integer.c	6;"	d	file:
main	reverse_integer.c	/^int main(void){$/;"	f
reverse	reverse_integer.c	/^int reverse(int x) {$/;"	f
ListNode	reverse_linked_list.c	/^struct ListNode {$/;"	s	file:
main	reverse_linked_list.c	/^int main(void){$/;"	f
next	reverse_linked_list.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
replace	reverse_linked_list.c	/^void replace(struct ListNode* current){$/;"	f
reverseList	reverse_linked_list.c	/^struct ListNode* reverseList(struct ListNode* head) {$/;"	f
store_next	reverse_linked_list.c	/^int store_next;$/;"	v
store_prev	reverse_linked_list.c	/^int store_prev;$/;"	v
val	reverse_linked_list.c	/^    int val;$/;"	m	struct:ListNode	file:
main	rotate_array.c	/^int main(void){$/;"	f
rotate	rotate_array.c	/^void rotate(int* nums, int numsSize, int k) {$/;"	f
FrontBackSplit	sort_list.c	/^void FrontBackSplit(struct ListNode* source,  struct ListNode** frontRef, struct ListNode** backRef){$/;"	f
ListNode	sort_list.c	/^struct ListNode {$/;"	s	file:
main	sort_list.c	/^int main(void){$/;"	f
mergesort	sort_list.c	/^void mergesort(struct ListNode** headref) {$/;"	f
next	sort_list.c	/^    struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode	file:
sortList	sort_list.c	/^struct ListNode* sortList(struct ListNode* head) {$/;"	f
sortedMerge	sort_list.c	/^struct ListNode *sortedMerge(struct ListNode *a,struct ListNode *b){$/;"	f
val	sort_list.c	/^    int val;$/;"	m	struct:ListNode	file:
buf_size	summary_ranges.c	10;"	d	file:
main	summary_ranges.c	/^int main(){$/;"	f
summaryRanges	summary_ranges.c	/^char** summaryRanges(int* nums, int numsSize, int* returnSize) {$/;"	f
convert	zigzag_conversion.c	/^char* convert(char* s, int numRows) {$/;"	f
main	zigzag_conversion.c	/^int main(void){$/;"	f
